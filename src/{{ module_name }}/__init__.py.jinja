import logging
import os
from datetime import datetime
from importlib.metadata import version

{%- if use_flask_apscheduler %}
from apscheduler.events import (EVENT_JOB_ADDED, EVENT_JOB_ERROR,
                                EVENT_JOB_EXECUTED, EVENT_JOB_MISSED,
                                EVENT_JOB_REMOVED, EVENT_JOB_SUBMITTED)
{%- endif %}
from dotenv import load_dotenv
from flask import Flask
{%- if use_htmx %}
from flask_htmx import HTMX
{%- endif %}
from flask_wtf import CSRFProtect

from {{ module_name }}.config import DevelopmentConfig, ProductionConfig, TestingConfig
from {{ module_name }}.core import health, limiter{%- if use_flask_executor %}, executor{%- endif %}{%- if use_flask_apscheduler %}, scheduler{%- endif %}
from {{ module_name }}.database import db, migrate
from {{ module_name }}.errors import server_error_handler
from {{ module_name }}.routes.main import blueprint as index_blueprint

load_dotenv()


def create_app():

    app = Flask(__name__)
    __VERSION__ = version(__name__)

    environment: str = os.environ.get("FLASK_ENV", "development")

    if environment == "development":
        app.config.from_object(DevelopmentConfig)
    elif environment == "production":
        app.config.from_object(ProductionConfig)
    elif environment == "testing":
        app.config.from_object(TestingConfig)

    @app.context_processor
    def inject_globals():
        return {
            "app_name": app.config["APP_NAME"],
            "app_description": app.config["APP_DESCRIPTION"],
            "worker_mode": False,
            "app_version": __VERSION__,
            "now": datetime.now(),
            "is_production": environment == "production",
        }

    app.config["VERSION"] = version(__name__)

    app.add_url_rule("/health", view_func=health, methods=["GET"])
    limiter.exempt(health)

    # Register blueprints
    app.register_blueprint(index_blueprint, url_prefix="/")

    # Error handlers
    app.register_error_handler(404, server_error_handler)
    app.register_error_handler(500, server_error_handler)
    app.register_error_handler(403, server_error_handler)

    # Initialize HTMX
    htmx = HTMX()
    htmx.init_app(app)

    # Initialize DB
    db.init_app(app)

    {%- if use_flask_executor %}
    executor.init_app(app)
    {%- endif %}

    # Initialize Migrations
    migrate.init_app(app, db)

    # Initialize limiter
    limiter.init_app(app)

    # Initialize flask-wtf
    csrf = CSRFProtect()
    csrf.init_app(app)

    {%- if use_flask_apscheduler %}
    # Initialize flask-apscheduler
    scheduler.init_app(app)

    logging.getLogger("apscheduler").setLevel(logging.INFO)

    scheduler.add_listener(job_missed, EVENT_JOB_MISSED)
    scheduler.add_listener(job_error, EVENT_JOB_ERROR)
    scheduler.add_listener(job_executed, EVENT_JOB_EXECUTED)
    scheduler.add_listener(job_added, EVENT_JOB_ADDED)
    scheduler.add_listener(job_removed, EVENT_JOB_REMOVED)
    scheduler.add_listener(job_submitted, EVENT_JOB_SUBMITTED)

    if environment not in ["testing"]:
        scheduler.start()
    {%- endif %}

    return app
